Option Explicit

'=== Address / position aliases (fixed addresses) ===
Private Const IncludeJob_Ans_Add     As String = "C9"
Private Const IncludeJobFrom_Lbl_Add As String = "B10"     ' label address: From:
Private Const IncludeJobTo_Lbl_Add   As String = "B11"     ' label address: To:
Private Const IncludeJobFrom_Ans_Add As String = "C10"     ' answer address: From date (MDY)
Private Const IncludeJobTo_Ans_Add   As String = "C11"     ' answer address: To date (MDY)

'=== Base rows for calculations (top row of active data block) ===
Private Const Normal_BaseRow         As Long = 12          ' first row of data block in normal layout
Private Const Shifted_BaseRow        As Long = 14          ' first row of data block in shifted layout

'=== Format anchors (reference addresses for formatting) ===
Private Const RefFormat_Header_Add   As String = "B5"      ' reference address for header formatting
Private Const RefFormat_Answer_Add   As String = "C5"      ' reference address for answer formatting

'=== Column reference ===
Private Const Answer_Col             As String = "C"       ' all answers live in this column

'=== Data block settings ===
Private Const WaiverFactors_Height   As Long = 8           ' number of rows in each data block

'=== Synced variables (module-level); blanks default to 1 via Convert_Numeric_Double ===
Private CC_Ans_Val As Double
Private CCRate_Ans_Val As Double
Private Payroll_Ans_Val As Double
Private IncLimits_Ans_Val As Double
Private ExMod_Ans_Val As Double
Private SchMod_Ans_Val As Double
Private PremiumDisc_Ans_Val As Double
Private TierFactor_Ans_Val As Double
Private WaiverCharge_Ans_Val As Double

'=== Dynamic addresses for visible inputs (kept current by UpdateAddress_DynamicVars) ===
Private CCRate_Ans_Add As String       ' "C13" (normal) or "C15" (shifted)
Private Payroll_Ans_Add As String      ' "C14" (normal) or "C16" (shifted)
Private IncLimits_Ans_Add As String    ' "C15" (normal) or "C17" (shifted)
Private PremiumDisc_Ans_Add As String  ' "C18" (normal) or "C20" (shifted)

Private Sub Worksheet_Change(ByVal Target As Range)
    ' Keep dynamic address variables in sync with current layout
    UpdateAddress_DynamicVars

    ' 1) IncludeJob (C9) changed → handle structure and DV, then recalc
    If Not Intersect(Target, Me.Range(IncludeJob_Ans_Add)) Is Nothing Then
        Handle_IncludeJob
        ' After structural change, refresh addresses/values and compute
        UpdateAddress_DynamicVars
        UpdateValues_AllVars
        Compute_WaiverCharge
        Exit Sub
    End If

    ' 2) If IncLimits input address changed (C15 normal / C17 shifted) and > 1 → show Proceed/Edit popup
    If Not Intersect(Target, Me.Range(IncLimits_Ans_Add)) Is Nothing Then Handle_IncLimits Me.Range(IncLimits_Ans_Add)

    ' 2b) From/To date validation (only when extra rows exist and either C10 or C11 changed)
    If Check_ExtraRowsPresent() Then
        Dim dateWatch As Range
        Set dateWatch = Me.Range(IncludeJobFrom_Ans_Add & ":" & IncludeJobTo_Ans_Add)
        If Not Intersect(Target, dateWatch) Is Nothing Then
            Validate_IncludeJob_Dates
        End If
    End If

    ' 3) Numeric data block edits (Normal/Shifted)
    Dim dataWatch As Range, hit As Range
    If Check_ExtraRowsPresent() Then
        Set dataWatch = Shifted_DataRange()
    Else
        Set dataWatch = Normal_DataRange()
    End If

    Set hit = Intersect(Target, dataWatch)
    If hit Is Nothing Then Exit Sub

    ' Enforce numeric-only and > 0 silently, then refresh values and compute
    Handle_DataChange hit
    UpdateValues_AllVars
    Compute_WaiverCharge
End Sub

'-----------------------------
' Handle_IncludeJob — responds to IncludeJob (C9) changes:
' - YES: insert extra rows (labels C10/C11), format, and reapply DV
' - NO/blank: remove extra rows and reapply DV
'-----------------------------
Private Sub Handle_IncludeJob()
    On Error GoTo CleanExit
    Dim prevEvents As Boolean, prevUpdate As Boolean
    prevEvents = Application.EnableEvents
    prevUpdate = Application.ScreenUpdating
    Application.EnableEvents = False
    Application.ScreenUpdating = False

    Dim newVal As String
    newVal = UCase$(Trim$(Me.Range(IncludeJob_Ans_Add).Value2))

    Dim haveExtra As Boolean
    haveExtra = Check_ExtraRowsPresent()

    Select Case newVal
        Case "YES"
            If Not haveExtra Then
                IncludeJob_Y_RowsRange().Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
            End If
            Set_ExtraRows
            Apply_NumericValidation_WaiverFactors

        Case "NO", vbNullString
            If haveExtra Then
                IncludeJob_Y_RowsRange().Delete Shift:=xlUp
            End If
            Apply_NumericValidation_WaiverFactors

        Case Else
            ' ignore
    End Select

CleanExit:
    Application.CutCopyMode = False
    Application.ScreenUpdating = prevUpdate
    Application.EnableEvents = prevEvents
End Sub

'-----------------------------
' UpdateAddress_DynamicVars — set input address strings for current layout
'  CCRate_Ans_Add:      C13 (normal) / C15 (shifted)
'  Payroll_Ans_Add:     C14 (normal) / C16 (shifted)
'  IncLimits_Ans_Add:   C15 (normal) / C17 (shifted)
'  PremiumDisc_Ans_Add: C18 (normal) / C20 (shifted)
'-----------------------------
Private Sub UpdateAddress_DynamicVars()
    If Check_ExtraRowsPresent() Then
        CCRate_Ans_Add      = "C15"
        Payroll_Ans_Add     = "C16"
        IncLimits_Ans_Add   = "C17"
        PremiumDisc_Ans_Add = "C20"
    Else
        CCRate_Ans_Add      = "C13"
        Payroll_Ans_Add     = "C14"
        IncLimits_Ans_Add   = "C15"
        PremiumDisc_Ans_Add = "C18"
    End If
End Sub

'-----------------------------
' Check_ExtraRowsPresent — True if table header is at Shifted_BaseRow - 1 (i.e., extra rows inserted)
'-----------------------------
Private Function Check_ExtraRowsPresent() As Boolean
    On Error GoTo FailSafe
    Dim lo As ListObject
    Set lo = Me.ListObjects("Calculator")
    Check_ExtraRowsPresent = (lo.HeaderRowRange.Row = (Shifted_BaseRow - 1))
    Exit Function
FailSafe:
    Check_ExtraRowsPresent = False
End Function

'-----------------------------
' Set_ExtraRows — normalize inserted rows:
' - Set labels (B10:B11) using RefFormat_Header_Add formatting
' - Clear/format C10:C11 answers using RefFormat_Answer_Add formatting
'-----------------------------
Private Sub Set_ExtraRows()
    ' Labels (B10:B11)
    CopyFormats FromCell:=Me.Range(RefFormat_Header_Add), _
                ToRange:=Me.Range(IncludeJobFrom_Lbl_Add & ":" & IncludeJobTo_Lbl_Add)
    Me.Range(IncludeJobFrom_Lbl_Add).Value = "From:"
    Me.Range(IncludeJobTo_Lbl_Add).Value = "To:"

    ' Answer date cells (C10:C11) - clear and apply answer formatting, remove any DV
    With IncludeJob_Y_DatesRange()
        .ClearContents
        On Error Resume Next
        .Validation.Delete
        On Error GoTo 0
        CopyFormats FromCell:=Me.Range(RefFormat_Answer_Add), ToRange:=.Cells
    End With
End Sub

'-----------------------------
' CopyFormats — copy only formats from FromCell to ToRange
'-----------------------------
Private Sub CopyFormats(ByVal FromCell As Range, ByVal ToRange As Range)
    FromCell.Copy
    ToRange.PasteSpecial Paste:=xlPasteFormats
    Application.CutCopyMode = False
End Sub

'-----------------------------
' Apply_NumericValidation_WaiverFactors — numbers-only DV on active block (no alerts/popups)
' Now also requires > 0 (strictly positive). Errors are not shown (ShowError=False).
'-----------------------------
Private Sub Apply_NumericValidation_WaiverFactors()
    Dim rng As Range
    Clear_DataValidation_WaiverFactors

    If Check_ExtraRowsPresent() Then
        Set rng = Shifted_DataRange()
    Else
        Set rng = Normal_DataRange()
    End If

    With rng.Validation
        .Delete
        ' Require decimal > 0
        .Add Type:=xlValidateDecimal, Operator:=xlGreater, Formula1:="0"
        .IgnoreBlank = True
        .InCellDropdown = False
        .ShowError = False        ' keep it silent; enforcement handled in Handle_DataChange as well
    End With
End Sub

'-----------------------------
' Clear_DataValidation_WaiverFactors — removes DV on both potential ranges
'-----------------------------
Private Sub Clear_DataValidation_WaiverFactors()
    On Error Resume Next
    Normal_DataRange().Validation.Delete
    Shifted_DataRange().Validation.Delete
    On Error GoTo 0
End Sub

'-----------------------------
' Handle_DataChange — silent numeric enforcement on edited cells in active data block
' - Allows blanks
' - Converts numeric strings to numbers
' - Clears non-numeric entries
' - Enforces > 0: negatives cleared; zero cleared
'-----------------------------
Private Sub Handle_DataChange(ByVal rngChanged As Range)
    On Error GoTo CleanExit
    Application.EnableEvents = False

    Dim c As Range, v As Variant, d As Double
    For Each c In rngChanged.Cells
        v = c.Value2
        If Len(v) = 0 Then
            ' allow blanks
        ElseIf IsNumeric(v) Then
            d = CDbl(v)
            If d <= 0# Then
                c.ClearContents   ' zero or negative → clear
            ElseIf VarType(v) = vbString Then
                On Error Resume Next
                c.Value = d       ' coerce numeric string to number
                On Error GoTo 0
            End If
        Else
            c.ClearContents       ' non-numeric → clear
        End If
    Next c

CleanExit:
    Application.EnableEvents = True
End Sub

'-----------------------------
' Handle_IncLimits — when IncLimits address is edited to > 1:
' - Show custom Proceed/Edit dialog (UserForm)
' - Proceed → keep value as typed
' - Edit    → clear the cell (next refresh makes IncLimits_Ans_Val = 1 via Convert_Numeric_Double)
'-----------------------------
Private Sub Handle_IncLimits(ByVal incCell As Range)
    Dim v As Variant
    v = incCell.Value2
    If Len(v) = 0 Then Exit Sub
    If Not IsNumeric(v) Then Exit Sub

    Dim x As Double
    x = CDbl(v)
    If x <= 1# Then Exit Sub

    ' Show custom Proceed/Edit dialog
    Dim f As ufIncLimitsConfirm
    Set f = New ufIncLimitsConfirm
    f.Setup x
    f.Show vbModal

    If Not f.ChosenProceed Then
        Application.EnableEvents = False
        incCell.ClearContents  ' treat as blank; next UpdateValues_AllVars sets IncLimits_Ans_Val = 1 via Convert_Numeric_Double
        Application.EnableEvents = True
    End If

    Unload f
    Set f = Nothing
End Sub

'-----------------------------
' Compute_WaiverCharge — calculates & writes result (rounded int) to:
' - C22 in normal layout (baseRow + 10)
' - C24 in shifted layout (baseRow + 10)
' Uses module-level values prepared by UpdateValues_AllVars.
' Requires CCRate & Payroll addresses to be non-blank (checked via *_Ans_Add).
'-----------------------------
Private Sub Compute_WaiverCharge()
    Dim baseRow As Long: baseRow = IIf(Check_ExtraRowsPresent(), Shifted_BaseRow, Normal_BaseRow)

    ' Guard: visible CCRate/Payroll must be non-blank before computing
    If Len(Me.Range(CCRate_Ans_Add).Value2) = 0 Or _
       Len(Me.Range(Payroll_Ans_Add).Value2) = 0 Then
        Dim prevEvtClear As Boolean
        prevEvtClear = Application.EnableEvents
        Application.EnableEvents = False
        Me.Cells(baseRow + 10, Answer_Col).ClearContents
        Application.EnableEvents = prevEvtClear
        Exit Sub
    End If

    ' WaiverCharge (full precision); blanks have already become 1 via UpdateValues_AllVars
    WaiverCharge_Ans_Val = (Payroll_Ans_Val * CCRate_Ans_Val / 100#) * _
                           IncLimits_Ans_Val * ExMod_Ans_Val * SchMod_Ans_Val * _
                           PremiumDisc_Ans_Val * TierFactor_Ans_Val

    ' Write rounded integer (display formatting already currency with 0 decimals)
    Dim outCell As Range
    Set outCell = Me.Cells(baseRow + 10, Answer_Col)

    Dim prevEvtWrite As Boolean
    prevEvtWrite = Application.EnableEvents
    Application.EnableEvents = False
    On Error Resume Next
    outCell.Value = Application.WorksheetFunction.Round(WaiverCharge_Ans_Val, 0)
    On Error GoTo 0
    Application.EnableEvents = prevEvtWrite
End Sub

'-----------------------------
' UpdateValues_AllVars — refresh all module-level values from active data block
' - IncLimits rule:
'     blank → 1
'     < 1   → 1 + entered
'     >= 1  → value as typed (only if user chose Proceed; otherwise cell was cleared)
' - PremiumDisc rule:
'     blank → 1
'     not blank → 1 - entered
'-----------------------------
Private Sub UpdateValues_AllVars()
    Dim baseRow As Long
    baseRow = IIf(Check_ExtraRowsPresent(), Shifted_BaseRow, Normal_BaseRow)

    ' Values from dynamic addresses (no offset math)
    CCRate_Ans_Val   = Convert_Numeric_Double(Me.Range(CCRate_Ans_Add).Value2)
    Payroll_Ans_Val  = Convert_Numeric_Double(Me.Range(Payroll_Ans_Add).Value2)

    ' Others by offset within active block
    CC_Ans_Val          = Convert_Numeric_Double(Me.Cells(baseRow + 0, Answer_Col).Value2)
    ExMod_Ans_Val       = Convert_Numeric_Double(Me.Cells(baseRow + 4, Answer_Col).Value2)
    SchMod_Ans_Val      = Convert_Numeric_Double(Me.Cells(baseRow + 5, Answer_Col).Value2)
    TierFactor_Ans_Val  = Convert_Numeric_Double(Me.Cells(baseRow + 7, Answer_Col).Value2)

    ' IncLimits (raw → adjusted) using its dynamic address
    Dim incRaw As Double
    If Len(Me.Range(IncLimits_Ans_Add).Value2) = 0 Then
        IncLimits_Ans_Val = 1#
    Else
        incRaw = Convert_Numeric_Double(Me.Range(IncLimits_Ans_Add).Value2)
        If incRaw < 1# Then
            IncLimits_Ans_Val = 1# + incRaw
        Else
            IncLimits_Ans_Val = incRaw   ' persists only if user clicked Proceed (else address was cleared)
        End If
    End If

    ' PremiumDisc (raw → adjusted) using its dynamic address
    Dim pdRaw As Double
    If Len(Me.Range(PremiumDisc_Ans_Add).Value2) = 0 Then
        PremiumDisc_Ans_Val = 1#
    Else
        pdRaw = Convert_Numeric_Double(Me.Range(PremiumDisc_Ans_Add).Value2)
        PremiumDisc_Ans_Val = 1# - pdRaw
    End If
End Sub

'-----------------------------
' Validate_IncludeJob_Dates — strict MDY; only digits + "/" or "-" (no spaces)
' - Accepts m/d/yy, m/d/yyyy, m/dd/yy, m/dd/yyyy, mm/d/yy, mm/d/yyyy, mm/dd/yy, mm/dd/yyyy
' - Validates only when both cells parse
' - Allows C10 = C11; if C10 > C11 → popup + clear both
' - If either cell has spaces or invalid characters, that cell is cleared silently
'-----------------------------
Private Sub Validate_IncludeJob_Dates()
    Dim fromCell As Range, toCell As Range
    Set fromCell = Me.Range(IncludeJobFrom_Ans_Add)
    Set toCell = Me.Range(IncludeJobTo_Ans_Add)

    Dim sFrom As String, sTo As String
    sFrom = CStr(fromCell.Value2)
    sTo = CStr(toCell.Value2)

    ' If either has spaces, clear that cell silently and stop
    If InStr(sFrom, " ") > 0 Then
        SilentClear fromCell: Exit Sub
    End If
    If InStr(sTo, " ") > 0 Then
        SilentClear toCell: Exit Sub
    End If

    ' Only proceed when both non-blank
    If LenB(sFrom) = 0 Or LenB(sTo) = 0 Then Exit Sub

    ' Reject any char other than digits, "/", "-"
    If Not AllowedDateCharsOnly(sFrom) Then SilentClear fromCell: Exit Sub
    If Not AllowedDateCharsOnly(sTo) Then SilentClear toCell: Exit Sub

    Dim dFrom As Date, dTo As Date
    If Not Parse_MDY_Date_Strict(sFrom, dFrom) Then SilentClear fromCell: Exit Sub
    If Not Parse_MDY_Date_Strict(sTo, dTo) Then SilentClear toCell: Exit Sub

    If dFrom > dTo Then
        MsgBox "The 'From' date (C10) cannot be later than the 'To' date (C11)." & vbCrLf & _
               "Both values will be cleared.", vbExclamation, "Invalid date range"
        Dim prev As Boolean
        prev = Application.EnableEvents
        Application.EnableEvents = False
        fromCell.ClearContents
        toCell.ClearContents
        Application.EnableEvents = prev
    End If
End Sub

'-----------------------------
' AllowedDateCharsOnly — True if s contains only 0-9 or "/" or "-" (no spaces)
'-----------------------------
Private Function AllowedDateCharsOnly(ByVal s As String) As Boolean
    Dim i As Long, ch As String
    For i = 1 To Len(s)
        ch = Mid$(s, i, 1)
        Select Case ch
            Case "0" To "9", "/", "-"
                ' ok
            Case Else
                AllowedDateCharsOnly = False
                Exit Function
        End Select
    Next i
    AllowedDateCharsOnly = True
End Function

'-----------------------------
' Parse_MDY_Date_Strict — accepts exactly the 8 MDY combos, separators "/" or "-"
' - m or mm, d or dd, yy or yyyy
' - Validates month/day ranges and guards against overflow (e.g., 2/30 invalid)
' - Two-digit year mapping: 50–99 → 1950–1999; 00–49 → 2000–2049
'-----------------------------
Private Function Parse_MDY_Date_Strict(ByVal s As String, ByRef outDate As Date) As Boolean
    On Error GoTo Fail

    ' Quick structural check: must be exactly two separators
    Dim sepCount As Long, i As Long, ch As String
    For i = 1 To Len(s)
        ch = Mid$(s, i, 1)
        If ch = "/" Or ch = "-" Then sepCount = sepCount + 1
    Next
    If sepCount <> 2 Then Exit Function

    ' Normalize to "/"
    Dim t As String
    t = Replace$(s, "-", "/")

    Dim parts() As String
    parts = Split(t, "/")
    If UBound(parts) <> 2 Then Exit Function

    ' Each part must be 1–2 digits for M and D, and 2 or 4 digits for Y
    Dim pm As String, pd As String, py As String
    pm = parts(0): pd = parts(1): py = parts(2)

    If Len(pm) < 1 Or Len(pm) > 2 Then Exit Function
    If Len(pd) < 1 Or Len(pd) > 2 Then Exit Function
    If Not (Len(py) = 2 Or Len(py) = 4) Then Exit Function

    ' All numeric
    If Not IsNumeric(pm) Or Not IsNumeric(pd) Or Not IsNumeric(py) Then Exit Function

    Dim m As Long, d As Long, y As Long
    m = CLng(pm): d = CLng(pd): y = CLng(py)

    ' Ranges
    If m < 1 Or m > 12 Then Exit Function
    If d < 1 Or d > 31 Then Exit Function

    ' Two-digit year mapping
    If Len(py) = 2 Then
        If y >= 50 Then
            y = 1900 + y
        Else
            y = 2000 + y
        End If
    End If

    ' Build and verify (avoid DateSerial overflow semantics)
    Dim dt As Date
    dt = DateSerial(y, m, d)
    If Month(dt) <> m Or Day(dt) <> d Or Year(dt) <> y Then Exit Function

    outDate = dt
    Parse_MDY_Date_Strict = True
    Exit Function
Fail:
    Parse_MDY_Date_Strict = False
End Function

'-----------------------------
' SilentClear — clear cell with events suppressed
'-----------------------------
Private Sub SilentClear(ByVal c As Range)
    Dim prev As Boolean
    prev = Application.EnableEvents
    Application.EnableEvents = False
    c.ClearContents
    Application.EnableEvents = prev
End Sub

'-----------------------------
' Convert_Numeric_Double — convert to Double; blanks/non-numeric → default (1 by default)
'-----------------------------
Private Function Convert_Numeric_Double(ByVal v As Variant, Optional ByVal defaultVal As Double = 1#) As Double
    If IsError(v) Then
        Convert_Numeric_Double = defaultVal
    ElseIf IsEmpty(v) Then
        Convert_Numeric_Double = defaultVal
    ElseIf VarType(v) = vbString Then
        If Trim$(v) = vbNullString Then
            Convert_Numeric_Double = defaultVal
        ElseIf IsNumeric(v) Then
            Convert_Numeric_Double = CDbl(v)
        Else
            Convert_Numeric_Double = defaultVal
        End If
    ElseIf IsNumeric(v) Then
        Convert_Numeric_Double = CDbl(v)
    Else
        Convert_Numeric_Double = defaultVal
    End If
End Function

'-----------------------------
' Normal_DataRange — Answer_Col & Normal_BaseRow : Answer_Col & (Normal_BaseRow + WaiverFactors_Height - 1)
'-----------------------------
Private Function Normal_DataRange() As Range
    Set Normal_DataRange = Me.Range( _
        Answer_Col & Normal_BaseRow & ":" & _
        Answer_Col & (Normal_BaseRow + WaiverFactors_Height - 1))
End Function

'-----------------------------
' Shifted_DataRange — Answer_Col & Shifted_BaseRow : Answer_Col & (Shifted_BaseRow + WaiverFactors_Height - 1)
'-----------------------------
Private Function Shifted_DataRange() As Range
    Set Shifted_DataRange = Me.Range( _
        Answer_Col & Shifted_BaseRow & ":" & _
        Answer_Col & (Shifted_BaseRow + WaiverFactors_Height - 1))
End Function

'-----------------------------
' IncludeJob_Y_RowsRange — entire rows for the job date labels (From/To)
'-----------------------------
Private Function IncludeJob_Y_RowsRange() As Range
    Dim r1 As Long, r2 As Long
    r1 = Me.Range(IncludeJobFrom_Lbl_Add).Row
    r2 = Me.Range(IncludeJobTo_Lbl_Add).Row
    Set IncludeJob_Y_RowsRange = Me.Rows(CStr(r1) & ":" & CStr(r2))
End Function

'-----------------------------
' IncludeJob_Y_DatesRange — C10:C11 (answers for From/To)
'-----------------------------
Private Function IncludeJob_Y_DatesRange() As Range
    Set IncludeJob_Y_DatesRange = Me.Range(IncludeJobFrom_Ans_Add & ":" & IncludeJobTo_Ans_Add)
End Function

'-----------------------------
' IncLimitsInputCell — returns the visible IncLimits input range (C15 normal / C17 shifted)
'-----------------------------
Private Function IncLimitsInputCell() As Range
    If Len(IncLimits_Ans_Add) = 0 Then
        UpdateAddress_DynamicVars
    End If
    Set IncLimitsInputCell = Me.Range(IncLimits_Ans_Add)
End Function
