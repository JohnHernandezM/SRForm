Option Explicit

'=== Address / position aliases ===
Private Const IncludeJob_Answer       As String = "C9"
Private Const IncludeJobFrom_Label    As String = "B10"     ' label cell: From:
Private Const IncludeJobTo_Label      As String = "B11"     ' label cell: To:
Private Const IncludeJobFrom_Answer   As String = "C10"     ' answer cell: From date
Private Const IncludeJobTo_Answer     As String = "C11"     ' answer cell: To date

'=== Base rows for calculations ===
Private Const NormalBaseRow           As Long = 12          ' first row of data block in normal layout
Private Const ShiftedBaseRow          As Long = 14          ' first row of data block in shifted layout

'=== Format anchors ===
Private Const ReferenceFormat_Header  As String = "B5"      ' reference cell for header formatting
Private Const ReferenceFormat_Answer  As String = "C5"      ' reference cell for answer formatting

'=== Column reference ===
Private Const AnswerColumn            As String = "C"       ' all answers are in this column

'=== Data block settings ===
Private Const DataBlockHeight         As Long = 8           ' number of rows in each data block

'=== Variables kept in sync with the dynamic range ===
Private CC As Double
Private CCRate As Double
Private Payroll As Double
Private IncLimits As Double
Private ExMod As Double
Private SchMod As Double
Private PremiumDisc As Double
Private TierFactor As Double

Private Sub Worksheet_Change(ByVal Target As Range)
    ' 1) IncludeJob (C9) toggle
    If Not Intersect(Target, Me.Range(IncludeJob_Answer)) Is Nothing Then
        HandleC9Toggle
        Exit Sub
    End If

    ' 2) Numeric data block (Normal/Shifted)
    Dim dataWatch As Range, hit As Range
    If ExtraRowsPresent() Then
        Set dataWatch = ShiftedDataRange()
    Else
        Set dataWatch = NormalDataRange()
    End If

    Set hit = Intersect(Target, dataWatch)
    If hit Is Nothing Then Exit Sub

    HandleDataChange hit
    UpdateDerivedVars
End Sub

'-----------------------------
' Handle toggle of IncludeJob (C9)
'-----------------------------
Private Sub HandleC9Toggle()
    On Error GoTo CleanExit
    Dim prevEvents As Boolean, prevUpdate As Boolean
    prevEvents = Application.EnableEvents
    prevUpdate = Application.ScreenUpdating
    Application.EnableEvents = False
    Application.ScreenUpdating = False

    Dim newVal As String
    newVal = UCase$(Trim$(Me.Range(IncludeJob_Answer).Value2))

    Dim haveExtra As Boolean
    haveExtra = ExtraRowsPresent()

    Select Case newVal
        Case "YES"
            If Not haveExtra Then
                JobRowsRange().Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
            End If
            SetupExtraRows
            ApplyNumericValidationToCurrentDataBlock

        Case "NO", vbNullString
            If haveExtra Then
                JobRowsRange().Delete Shift:=xlUp
            End If
            ApplyNumericValidationToCurrentDataBlock

        Case Else
            ' ignore
    End Select

    UpdateDerivedVars

CleanExit:
    Application.CutCopyMode = False
    Application.ScreenUpdating = prevUpdate
    Application.EnableEvents = prevEvents
End Sub

'-----------------------------
' Detect whether extra rows are present
'   True  -> header row pushed down to ShiftedBaseRow - 1
'   False -> header row at baseline (NormalBaseRow - 1)
'-----------------------------
Private Function ExtraRowsPresent() As Boolean
    On Error GoTo FailSafe
    Dim lo As ListObject
    Set lo = Me.ListObjects("Calculator")
    ExtraRowsPresent = (lo.HeaderRowRange.Row = (ShiftedBaseRow - 1))
    Exit Function
FailSafe:
    ExtraRowsPresent = False
End Function

'-----------------------------
' Normalize newly added rows (labels and formats; clear any DV)
'-----------------------------
Private Sub SetupExtraRows()
    ' Labels (B10:B11)
    CopyFormats FromCell:=Me.Range(ReferenceFormat_Header), _
                ToRange:=Me.Range(IncludeJobFrom_Label & ":" & IncludeJobTo_Label)
    Me.Range(IncludeJobFrom_Label).Value = "From:"
    Me.Range(IncludeJobTo_Label).Value = "To:"

    ' Answer date cells (C10:C11) - clear and apply answer formatting, remove any DV
    With JobDatesRange()
        .ClearContents
        On Error Resume Next
        .Validation.Delete
        On Error GoTo 0
        CopyFormats FromCell:=Me.Range(ReferenceFormat_Answer), ToRange:=.Cells
    End With
End Sub

'-----------------------------
' Copy only formats (no values)
'-----------------------------
Private Sub CopyFormats(ByVal FromCell As Range, ByVal ToRange As Range)
    FromCell.Copy
    ToRange.PasteSpecial Paste:=xlPasteFormats
    Application.CutCopyMode = False
End Sub

'-----------------------------
' Apply numeric Data Validation to active data block (no alerts)
'-----------------------------
Private Sub ApplyNumericValidationToCurrentDataBlock()
    Dim rng As Range
    ClearDataValidationOnDataBlocks

    If ExtraRowsPresent() Then
        Set rng = ShiftedDataRange()
    Else
        Set rng = NormalDataRange()
    End If

    With rng.Validation
        .Delete
        .Add Type:=xlValidateDecimal, Operator:=xlBetween, Formula1:="-1E+308", Formula2:="1E+308"
        .IgnoreBlank = True
        .InCellDropdown = False
        ' No ErrorTitle / ErrorMessage / AlertStyle / ShowError
    End With
End Sub

Private Sub ClearDataValidationOnDataBlocks()
    On Error Resume Next
    NormalDataRange().Validation.Delete
    ShiftedDataRange().Validation.Delete
    On Error GoTo 0
End Sub

'-----------------------------
' Numeric block fallback enforcement (silent)
'-----------------------------
Private Sub HandleDataChange(ByVal rngChanged As Range)
    On Error GoTo CleanExit
    Application.EnableEvents = False

    Dim c As Range, v
    For Each c In rngChanged.Cells
        v = c.Value2
        If Len(v) = 0 Then
            ' allow blanks
        ElseIf IsNumeric(v) Then
            If VarType(v) = vbString Then
                On Error Resume Next
                c.Value = CDbl(v)
                On Error GoTo 0
            End If
        Else
            c.ClearContents
        End If
    Next c

CleanExit:
    Application.EnableEvents = True
End Sub

'-----------------------------
' Sync derived variables with active data block
'-----------------------------
Private Sub UpdateDerivedVars()
    Dim baseRow As Long
    baseRow = IIf(ExtraRowsPresent(), ShiftedBaseRow, NormalBaseRow)

    CC          = NzD(Me.Cells(baseRow + 0, AnswerColumn).Value2)
    CCRate      = NzD(Me.Cells(baseRow + 1, AnswerColumn).Value2)
    Payroll     = NzD(Me.Cells(baseRow + 2, AnswerColumn).Value2)
    IncLimits   = NzD(Me.Cells(baseRow + 3, AnswerColumn).Value2)
    ExMod       = NzD(Me.Cells(baseRow + 4, AnswerColumn).Value2)
    SchMod      = NzD(Me.Cells(baseRow + 5, AnswerColumn).Value2)
    PremiumDisc = NzD(Me.Cells(baseRow + 6, AnswerColumn).Value2)
    TierFactor  = NzD(Me.Cells(baseRow + 7, AnswerColumn).Value2)
End Sub

'-----------------------------
' Utility: Convert to Double
'-----------------------------
Private Function NzD(ByVal v As Variant, Optional ByVal defaultVal As Double = 1#) As Double
    If IsError(v) Then
        NzD = defaultVal
    ElseIf IsEmpty(v) Then
        NzD = defaultVal
    ElseIf VarType(v) = vbString Then
        If Trim$(v) = vbNullString Then
            NzD = defaultVal
        ElseIf IsNumeric(v) Then
            NzD = CDbl(v)
        Else
            NzD = defaultVal
        End If
    ElseIf IsNumeric(v) Then
        NzD = CDbl(v)
    Else
        NzD = defaultVal
    End If
End Function

'-----------------------------
' Dynamic range helpers
'-----------------------------
Private Function NormalDataRange() As Range
    Set NormalDataRange = Me.Range( _
        AnswerColumn & NormalBaseRow & ":" & _
        AnswerColumn & (NormalBaseRow + DataBlockHeight - 1))
End Function

Private Function ShiftedDataRange() As Range
    Set ShiftedDataRange = Me.Range( _
        AnswerColumn & ShiftedBaseRow & ":" & _
        AnswerColumn & (ShiftedBaseRow + DataBlockHeight - 1))
End Function

'-----------------------------
' Helpers to build job rows/dates ranges dynamically
'-----------------------------
Private Function JobRowsRange() As Range
    Dim r1 As Long, r2 As Long
    r1 = Me.Range(IncludeJobFrom_Label).Row
    r2 = Me.Range(IncludeJobTo_Label).Row
    Set JobRowsRange = Me.Rows(CStr(r1) & ":" & CStr(r2))
End Function

Private Function JobDatesRange() As Range
    Set JobDatesRange = Me.Range(IncludeJobFrom_Answer & ":" & IncludeJobTo_Answer)
End Function
