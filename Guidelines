Option Explicit

'=== Address / position aliases ===
Private Const IncludeJob_Answer       As String = "C9"
Private Const NewRows                 As String = "10:11"   ' rows to insert/delete
Private Const ShiftedHeaderPos        As Long   = 13        ' table header row when shifted
Private Const IncludeJobFrom_Label    As String = "B10"     ' label cell: From:
Private Const IncludeJobTo_Label      As String = "B11"     ' label cell: To:
Private Const IncludeJobFrom_Answer   As String = "C10"     ' answer cell: From date
Private Const IncludeJobTo_Answer     As String = "C11"     ' answer cell: To date

'=== Base rows for calculations ===
Private Const NormalBaseRow           As Long = 12          ' first row of data block in normal layout
Private Const ShiftedBaseRow          As Long = 14          ' first row of data block in shifted layout

'=== Format anchors ===
Private Const ReferenceFormat_Header  As String = "B5"      ' reference cell for header formatting
Private Const ReferenceFormat_Answer  As String = "C5"      ' reference cell for answer formatting
Private Const IncludeJobDates         As String = "C10:C11" ' range for From/To job dates (only present if YES in C9)

'=== Column reference ===
Private Const AnswerColumn            As String = "C"       ' all answers are in this column

'=== Data block settings ===
Private Const DataBlockHeight         As Long = 8           ' number of rows in each data block

'=== Date validation settings ===
Private Const EffectiveDate_Answer    As String = "C5"      ' main date input
Private Const DateOutputFormat        As String = "mm/dd/yyyy"
Private Const MinAllowedDate          As Date = #1/1/1950#
Private Const MaxAllowedDate          As Date = #12/31/2099#

'=== Variables kept in sync with the dynamic range ===
Private CC As Double
Private CCRate As Double
Private Payroll As Double
Private IncLimits As Double
Private ExMod As Double
Private SchMod As Double
Private PremiumDisc As Double
Private TierFactor As Double

Private Sub Worksheet_Change(ByVal Target As Range)
    ' 1) IncludeJob (C9) toggle
    If Not Intersect(Target, Me.Range(IncludeJob_Answer)) Is Nothing Then
        HandleC9Toggle
        Exit Sub
    End If

    ' 2) Date cells: C5 and (if present) C10:C11
    Dim dateHit As Range
    Set dateHit = Intersect(Target, DateWatchRange())
    If Not dateHit Is Nothing Then
        HandleDateChange dateHit
        EnforceJobDateOrder
        Exit Sub
    End If

    ' 3) Numeric data block (Normal/Shifted)
    Dim dataWatch As Range, hit As Range
    If ExtraRowsPresent() Then
        Set dataWatch = ShiftedDataRange()
    Else
        Set dataWatch = NormalDataRange()
    End If

    Set hit = Intersect(Target, dataWatch)
    If hit Is Nothing Then Exit Sub

    HandleDataChange hit
    UpdateDerivedVars
End Sub

'-----------------------------
' Handle toggle of IncludeJob (C9)
'-----------------------------
Private Sub HandleC9Toggle()
    On Error GoTo CleanExit
    Dim prevEvents As Boolean, prevUpdate As Boolean
    prevEvents = Application.EnableEvents
    prevUpdate = Application.ScreenUpdating
    Application.EnableEvents = False
    Application.ScreenUpdating = False

    Dim newVal As String
    newVal = UCase$(Trim$(Me.Range(IncludeJob_Answer).Value2))

    Dim haveExtra As Boolean
    haveExtra = ExtraRowsPresent()

    Select Case newVal
        Case "YES"
            If Not haveExtra Then
                Me.Rows(NewRows).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
            End If
            SetupExtraRows
            EnsureDateFormats
            ApplyNumericValidationToCurrentDataBlock

        Case "NO", vbNullString
            If haveExtra Then
                Me.Rows(NewRows).Delete Shift:=xlUp
            End If
            EnsureDateFormats
            ApplyNumericValidationToCurrentDataBlock
        Case Else
            ' ignore
    End Select

    UpdateDerivedVars

CleanExit:
    Application.CutCopyMode = False
    Application.ScreenUpdating = prevUpdate
    Application.EnableEvents = prevEvents
End Sub

'-----------------------------
' Detect whether extra rows (10:11) are present
'-----------------------------
Private Function ExtraRowsPresent() As Boolean
    On Error GoTo FailSafe
    Dim lo As ListObject
    Set lo = Me.ListObjects("Calculator")
    ExtraRowsPresent = (lo.HeaderRowRange.Row = ShiftedHeaderPos)
    Exit Function
FailSafe:
    ExtraRowsPresent = False
End Function

'-----------------------------
' Normalize newly added rows
'-----------------------------
Private Sub SetupExtraRows()
    ' Labels
    CopyFormats FromCell:=Me.Range(ReferenceFormat_Header), ToRange:=Me.Range(IncludeJobFrom_Label & ":" & IncludeJobTo_Label)
    Me.Range(IncludeJobFrom_Label).Value = "From:"
    Me.Range(IncludeJobTo_Label).Value = "To:"

    ' Date inputs
    With Me.Range(IncludeJobDates)
        .ClearContents
        On Error Resume Next
        .Validation.Delete
        On Error GoTo 0
        CopyFormats FromCell:=Me.Range(ReferenceFormat_Answer), ToRange:=.Cells
    End With
End Sub

'-----------------------------
' Ensure date cells use a consistent display format
'-----------------------------
Private Sub EnsureDateFormats()
    On Error Resume Next
    Me.Range(EffectiveDate_Answer).NumberFormat = DateOutputFormat
    If ExtraRowsPresent() Then
        Me.Range(IncludeJobDates).NumberFormat = DateOutputFormat
    End If
    On Error GoTo 0
End Sub

'-----------------------------
' Copy only formats (no values)
'-----------------------------
Private Sub CopyFormats(ByVal FromCell As Range, ByVal ToRange As Range)
    FromCell.Copy
    ToRange.PasteSpecial Paste:=xlPasteFormats
    Application.CutCopyMode = False
End Sub

'-----------------------------
' Apply numeric Data Validation to active data block (no alerts)
'-----------------------------
Private Sub ApplyNumericValidationToCurrentDataBlock()
    Dim rng As Range
    ClearDataValidationOnDataBlocks

    If ExtraRowsPresent() Then
        Set rng = ShiftedDataRange()
    Else
        Set rng = NormalDataRange()
    End If

    With rng.Validation
        .Delete
        .Add Type:=xlValidateDecimal, Operator:=xlBetween, Formula1:="-1E+308", Formula2:="1E+308"
        .IgnoreBlank = True
        .InCellDropdown = False
        ' No ErrorTitle / ErrorMessage / AlertStyle / ShowError
    End With
End Sub

Private Sub ClearDataValidationOnDataBlocks()
    On Error Resume Next
    NormalDataRange().Validation.Delete
    ShiftedDataRange().Validation.Delete
    On Error GoTo 0
End Sub

'-----------------------------
' Numeric block fallback enforcement (silent)
'-----------------------------
Private Sub HandleDataChange(ByVal rngChanged As Range)
    On Error GoTo CleanExit
    Application.EnableEvents = False

    Dim c As Range, v
    For Each c In rngChanged.Cells
        v = c.Value2
        If Len(v) = 0 Then
            ' allow blanks
        ElseIf IsNumeric(v) Then
            If VarType(v) = vbString Then
                On Error Resume Next
                c.Value = CDbl(v)
                On Error GoTo 0
            End If
        Else
            c.ClearContents
        End If
    Next c

CleanExit:
    Application.EnableEvents = True
End Sub

'-----------------------------
' Date input handler (C5 and C10:C11 if present) â€” silent validation
'-----------------------------
Private Sub HandleDateChange(ByVal rngChanged As Range)
    On Error GoTo CleanExit
    Application.EnableEvents = False

    Dim c As Range, v, d As Date
    For Each c In rngChanged.Cells
        v = c.Value2

        If Len(v) = 0 Then
            ' allow blank

        ElseIf VarType(v) = vbDate Or IsDate(v) Then
            d = CDate(v)
            If d < MinAllowedDate Or d > MaxAllowedDate Then
                c.ClearContents
            Else
                c.Value = d
                c.NumberFormat = DateOutputFormat
            End If

        Else
            Dim s As String, sNorm As String
            s = CStr(v)

            If Not IsDateAllowedChars(s) Then
                c.ClearContents
                GoTo NextCell
            End If

            ' normalize dashes/spaces to slashes & trim
            sNorm = Replace(Replace(Trim$(s), "-", "/"), " ", "")

            If TryParseUSDate(sNorm, d) Then
                If d < MinAllowedDate Or d > MaxAllowedDate Then
                    c.ClearContents
                Else
                    c.Value = d
                    c.NumberFormat = DateOutputFormat
                End If
            Else
                c.ClearContents
            End If
        End If
NextCell:
    Next c

CleanExit:
    Application.EnableEvents = True
End Sub

'-----------------------------
' Enforce C11 >= C10 silently
'-----------------------------
Private Sub EnforceJobDateOrder()
    If Not ExtraRowsPresent() Then Exit Sub

    Dim fromCell As Range, toCell As Range
    Set fromCell = Me.Range(IncludeJobFrom_Answer)
    Set toCell   = Me.Range(IncludeJobTo_Answer)

    If Len(fromCell.Value2) = 0 Or Len(toCell.Value2) = 0 Then Exit Sub
    If Not (IsDate(fromCell.Value) And IsDate(toCell.Value)) Then Exit Sub

    Dim dFrom As Date, dTo As Date
    dFrom = CDate(fromCell.Value)
    dTo   = CDate(toCell.Value)

    If dTo < dFrom Then
        Application.EnableEvents = False
        toCell.ClearContents
        Application.EnableEvents = True
    End If
End Sub

'-----------------------------
' US m/d/(yy|yyyy) parser (after normalization)
'-----------------------------
Private Function TryParseUSDate(ByVal s As String, ByRef outDate As Date) As Boolean
    Dim re As Object, m As Object
    Set re = CreateObject("VBScript.RegExp")
    re.Pattern = "^\s*(\d{1,2})/(\d{1,2})/(\d{2}|\d{4})\s*$"
    re.IgnoreCase = True
    re.Global = False

    If Not re.Test(s) Then
        TryParseUSDate = False
        Exit Function
    End If

    Set m = re.Execute(s)(0)
    Dim mm As Long, dd As Long, yy As Long
    mm = CLng(m.SubMatches(0))
    dd = CLng(m.SubMatches(1))
    yy = CLng(m.SubMatches(2))

    If mm < 1 Or mm > 12 Then GoTo Bad
    If dd < 1 Or dd > 31 Then GoTo Bad

    If Len(CStr(yy)) = 2 Then
        If yy <= 29 Then
            yy = 2000 + yy
        Else
            yy = 1900 + yy
        End If
    End If

    On Error GoTo Bad
    outDate = DateSerial(yy, mm, dd)
    If Year(outDate) <> yy Or Month(outDate) <> mm Or Day(outDate) <> dd Then GoTo Bad

    TryParseUSDate = True
    Exit Function
Bad:
    TryParseUSDate = False
End Function

'-----------------------------
' Allowed characters for date input
'-----------------------------
Private Function IsDateAllowedChars(ByVal s As String) As Boolean
    Dim re As Object
    Set re = CreateObject("VBScript.RegExp")
    re.Pattern = "^[0-9/\-\s]+$"
    re.IgnoreCase = True
    re.Global = False
    IsDateAllowedChars = re.Test(s)
End Function

'-----------------------------
' Sync derived variables with active data block
'-----------------------------
Private Sub UpdateDerivedVars()
    Dim baseRow As Long
    baseRow = IIf(ExtraRowsPresent(), ShiftedBaseRow, NormalBaseRow)

    CC          = NzD(Me.Cells(baseRow + 0, AnswerColumn).Value2)
    CCRate      = NzD(Me.Cells(baseRow + 1, AnswerColumn).Value2)
    Payroll     = NzD(Me.Cells(baseRow + 2, AnswerColumn).Value2)
    IncLimits   = NzD(Me.Cells(baseRow + 3, AnswerColumn).Value2)
    ExMod       = NzD(Me.Cells(baseRow + 4, AnswerColumn).Value2)
    SchMod      = NzD(Me.Cells(baseRow + 5, AnswerColumn).Value2)
    PremiumDisc = NzD(Me.Cells(baseRow + 6, AnswerColumn).Value2)
    TierFactor  = NzD(Me.Cells(baseRow + 7, AnswerColumn).Value2)
End Sub

'-----------------------------
' Utility: Convert to Double
'-----------------------------
Private Function NzD(ByVal v As Variant, Optional ByVal defaultVal As Double = 1#) As Double
    If IsError(v) Then
        NzD = defaultVal
    ElseIf IsEmpty(v) Then
        NzD = defaultVal
    ElseIf VarType(v) = vbString Then
        If Trim$(v) = vbNullString Then
            NzD = defaultVal
        ElseIf IsNumeric(v) Then
            NzD = CDbl(v)
        Else
            NzD = defaultVal
        End If
    ElseIf IsNumeric(v) Then
        NzD = CDbl(v)
    Else
        NzD = defaultVal
    End If
End Function

'-----------------------------
' Dynamic range helpers
'-----------------------------
Private Function NormalDataRange() As Range
    Set NormalDataRange = Me.Range( _
        AnswerColumn & NormalBaseRow & ":" & _
        AnswerColumn & (NormalBaseRow + DataBlockHeight - 1))
End Function

Private Function ShiftedDataRange() As Range
    Set ShiftedDataRange = Me.Range( _
        AnswerColumn & ShiftedBaseRow & ":" & _
        AnswerColumn & (ShiftedBaseRow + DataBlockHeight - 1))
End Function

'-----------------------------
' Build the current date-watch range
'-----------------------------
Private Function DateWatchRange() As Range
    Dim r As Range
    Set r = Me.Range(EffectiveDate_Answer)
    If ExtraRowsPresent() Then
        Set r = Union(r, Me.Range(IncludeJobDates))
    End If
    Set DateWatchRange = r
End Function
