Option Explicit

'=== Address / position aliases ===
Private Const IncludeJob        As String = "C9"
Private Const NewRows           As String = "10:11"   ' rows to insert/delete
Private Const ShiftedHeaderPos  As Long   = 13        ' table header row when shifted
Private Const IncludeJobFrom    As String = "B10"     ' label cell: From:
Private Const IncludeJobTo      As String = "B11"     ' label cell: To:

'=== Base rows for calculations ===
Private Const NormalBaseRow     As Long = 12          ' first row of data block in normal layout
Private Const ShiftedBaseRow    As Long = 14          ' first row of data block in shifted layout

'=== Format anchors ===
Private Const UseHeaderFormat   As String = "B5"      ' reference cell for header formatting
Private Const UseAnswerFormat   As String = "C5"      ' reference cell for answer formatting
Private Const IncludeJobDates   As String = "C10:C11" ' range for From/To job dates (only present if YES in C9)

'=== Column reference ===
Private Const AnswerColumn      As String = "C"       ' all answers are in this column

'=== Data block settings ===
Private Const DataBlockHeight   As Long = 8           ' number of rows in each data block

'=== Variables kept in sync with the dynamic range ===
Private CC As Double
Private CCRate As Double
Private Payroll As Double
Private IncLimits As Double
Private ExMod As Double
Private SchMod As Double
Private PremiumDisc As Double
Private TierFactor As Double

Private Sub Worksheet_Change(ByVal Target As Range)
    ' 1) If IncludeJob (C9) changed → handle toggle (insert/delete job rows),
    '    reapply numeric DV on active data block, refresh variables, then stop.
    If Not Intersect(Target, Me.Range(IncludeJob)) Is Nothing Then
        HandleC9Toggle
        Exit Sub
    End If

    ' 2) Otherwise, watch ONLY the active data block (Normal/Shifted).
    Dim dataWatch As Range, hit As Range
    If ExtraRowsPresent() Then
        Set dataWatch = ShiftedDataRange()
    Else
        Set dataWatch = NormalDataRange()
    End If

    Set hit = Intersect(Target, dataWatch)
    If hit Is Nothing Then Exit Sub

    ' Enforce numeric-only (fallback) and refresh derived variables
    HandleDataChange hit
    UpdateDerivedVars
End Sub

'-----------------------------
' Handle toggle of IncludeJob (C9):
'   - Insert/delete NewRows (10:11)
'   - Normalize labels/dates rows if inserted
'   - Reapply numeric DV to active data block
'   - Refresh derived variables
'-----------------------------
Private Sub HandleC9Toggle()
    On Error GoTo CleanExit
    Dim prevEvents As Boolean, prevUpdate As Boolean
    prevEvents = Application.EnableEvents
    prevUpdate = Application.ScreenUpdating
    Application.EnableEvents = False
    Application.ScreenUpdating = False

    Dim newVal As String
    newVal = UCase$(Trim$(Me.Range(IncludeJob).Value2))

    Dim haveExtra As Boolean
    haveExtra = ExtraRowsPresent()

    Select Case newVal
        Case "YES"
            If Not haveExtra Then
                Me.Rows(NewRows).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
            End If
            SetupExtraRows
            ApplyNumericValidationToCurrentDataBlock

        Case "NO", vbNullString
            If haveExtra Then
                Me.Rows(NewRows).Delete Shift:=xlUp
            End If
            ApplyNumericValidationToCurrentDataBlock

        Case Else
            ' ignore
    End Select

    ' Refresh derived variables after layout change
    UpdateDerivedVars

CleanExit:
    Application.CutCopyMode = False
    Application.ScreenUpdating = prevUpdate
    Application.EnableEvents = prevEvents
End Sub

'-----------------------------
' Detect whether extra rows (10:11) are present
'   True  -> header row pushed down to ShiftedHeaderPos (row 13)
'   False -> header row at baseline (row 11)
'-----------------------------
Private Function ExtraRowsPresent() As Boolean
    On Error GoTo FailSafe
    Dim lo As ListObject
    Set lo = Me.ListObjects("Calculator")
    ExtraRowsPresent = (lo.HeaderRowRange.Row = ShiftedHeaderPos)
    Exit Function
FailSafe:
    ExtraRowsPresent = False
End Function

'-----------------------------
' Normalize newly added rows:
'   - IncludeJobFrom (B10) = "From:"
'   - IncludeJobTo (B11)   = "To:"
'   - Apply UseHeaderFormat formatting to B10:B11
'   - Clear contents + remove DV on IncludeJobDates (C10:C11)
'   - Apply UseAnswerFormat formatting to C10:C11
'-----------------------------
Private Sub SetupExtraRows()
    ' Label cells with header formatting
    CopyFormats FromCell:=Me.Range(UseHeaderFormat), ToRange:=Me.Range(IncludeJobFrom & ":" & IncludeJobTo)
    Me.Range(IncludeJobFrom).Value = "From:"
    Me.Range(IncludeJobTo).Value = "To:"

    ' Date input cells: reset contents, formatting, and DV
    With Me.Range(IncludeJobDates)
        .ClearContents
        On Error Resume Next
        .Validation.Delete
        On Error GoTo 0
        CopyFormats FromCell:=Me.Range(UseAnswerFormat), ToRange:=.Cells
    End With
End Sub

'-----------------------------
' Copy only formats (no values)
'-----------------------------
Private Sub CopyFormats(ByVal FromCell As Range, ByVal ToRange As Range)
    FromCell.Copy
    ToRange.PasteSpecial Paste:=xlPasteFormats
    Application.CutCopyMode = False
End Sub

'-----------------------------
' Apply numeric Data Validation to active data block
'   - Clears DV on both Normal & Shifted blocks to prevent leftovers
'   - Applies decimal DV rule allowing any real number (blanks allowed)
'-----------------------------
Private Sub ApplyNumericValidationToCurrentDataBlock()
    Dim rng As Range

    ' Clear DV on both possible blocks
    ClearDataValidationOnDataBlocks

    If ExtraRowsPresent() Then
        Set rng = ShiftedDataRange()
    Else
        Set rng = NormalDataRange()
    End If

    With rng.Validation
        .Delete
        ' Accept any real number; blanks allowed due to IgnoreBlank
        .Add Type:=xlValidateDecimal, AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, Formula1:="-1E+308", Formula2:="1E+308"
        .IgnoreBlank = True
        .InCellDropdown = False
        .ErrorTitle = "Only numbers allowed"
        .ErrorMessage = "Please enter a number (decimals allowed)."
        .ShowError = True
    End With
End Sub

Private Sub ClearDataValidationOnDataBlocks()
    On Error Resume Next
    NormalDataRange().Validation.Delete
    ShiftedDataRange().Validation.Delete
    On Error GoTo 0
End Sub

'-----------------------------
' Fallback event check:
'   - Enforce numeric-only in changed cells
'   - Allows blanks
'   - Coerces numeric strings to numbers
'   - Clears non-numeric values
'-----------------------------
Private Sub HandleDataChange(ByVal rngChanged As Range)
    On Error GoTo CleanExit
    Application.EnableEvents = False

    Dim c As Range, v
    For Each c In rngChanged.Cells
        v = c.Value2
        If Len(v) = 0 Then
            ' allow blanks
        ElseIf IsNumeric(v) Then
            If VarType(v) = vbString Then
                On Error Resume Next
                c.Value = CDbl(v)
                On Error GoTo 0
            End If
        Else
            c.ClearContents
        End If
    Next c

CleanExit:
    Application.EnableEvents = True
End Sub

'-----------------------------
' Sync derived variables with active data block
'   - Chooses baseRow = NormalBaseRow (12) or ShiftedBaseRow (14)
'   - Reads from AnswerColumn
'   - Blanks/non-numeric treated as 1 (safe default)
'-----------------------------
Private Sub UpdateDerivedVars()
    Dim baseRow As Long
    baseRow = IIf(ExtraRowsPresent(), ShiftedBaseRow, NormalBaseRow)

    CC          = NzD(Me.Cells(baseRow + 0, AnswerColumn).Value2) ' C12 or C14
    CCRate      = NzD(Me.Cells(baseRow + 1, AnswerColumn).Value2) ' C13 or C15
    Payroll     = NzD(Me.Cells(baseRow + 2, AnswerColumn).Value2) ' C14 or C16
    IncLimits   = NzD(Me.Cells(baseRow + 3, AnswerColumn).Value2) ' C15 or C17
    ExMod       = NzD(Me.Cells(baseRow + 4, AnswerColumn).Value2) ' C16 or C18
    SchMod      = NzD(Me.Cells(baseRow + 5, AnswerColumn).Value2) ' C17 or C19
    PremiumDisc = NzD(Me.Cells(baseRow + 6, AnswerColumn).Value2) ' C18 or C20
    TierFactor  = NzD(Me.Cells(baseRow + 7, AnswerColumn).Value2) ' C19 or C21
End Sub

'-----------------------------
' Utility: Convert to Double
'   - Errors, blanks, empty strings → defaultVal (1 by default)
'   - Numeric strings/numbers → coerced to Double
'-----------------------------
Private Function NzD(ByVal v As Variant, Optional ByVal defaultVal As Double = 1#) As Double
    If IsError(v) Then
        NzD = defaultVal
    ElseIf IsEmpty(v) Then
        NzD = defaultVal
    ElseIf VarType(v) = vbString Then
        If Trim$(v) = vbNullString Then
            NzD = defaultVal
        ElseIf IsNumeric(v) Then
            NzD = CDbl(v)
        Else
            NzD = defaultVal
        End If
    ElseIf IsNumeric(v) Then
        NzD = CDbl(v)
    Else
        NzD = defaultVal
    End If
End Function

'-----------------------------
' Dynamic range helpers
'   - Both ranges are DataBlockHeight rows tall
'-----------------------------
Private Function NormalDataRange() As Range
    Set NormalDataRange = Me.Range( _
        AnswerColumn & NormalBaseRow & ":" & _
        AnswerColumn & (NormalBaseRow + DataBlockHeight - 1))
End Function

Private Function ShiftedDataRange() As Range
    Set ShiftedDataRange = Me.Range( _
        AnswerColumn & ShiftedBaseRow & ":" & _
        AnswerColumn & (ShiftedBaseRow + DataBlockHeight - 1))
End Function
